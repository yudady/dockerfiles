version: "3.8"
services:
  reverse-proxy-https-helper:
    image: alpine
    command: sh -c "cd /etc/ssl/traefik
      && wget traefik.me/cert.pem -O cert.pem
      && wget traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - ./data/certs:/etc/ssl/traefik
    networks:
      - docker-traffic

  traefik:
    restart: unless-stopped
    container_name: traefik_docker_symfony
    image: traefik:v2.9.6
    depends_on:
      reverse-proxy-https-helper:
        condition: service_completed_successfully
    ports:
      - 80:80 # 暴露的 http 端口
      - 443:443 # 暴露的 https 端口
      - 8080:8080 # webUI暴露的端口(必須製定--api.insecure=true才可以訪問)
    command: --api.insecure=true --providers.docker     # 啟用webUI 並告訴Traefile去監聽docker的容器實例
    labels:
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./tls.yml:/etc/traefik/tls.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/certs:/etc/ssl/traefik
    networks:
      - docker-traffic

  mygov1:
    # A container that exposes an API to show its IP address
    image: yudady/mygo:v1
    deploy:
      replicas: 3
    networks:
      - docker-traffic
    labels:
      - "traefik.http.routers.app1.rule=Host(`app1.traefik.me`)"
      - "traefik.http.routers.app1-tls.tls.domains[0].main=app1.traefik.me"
      - "traefik.http.routers.app1-tls.tls.domains[0].sans=app1-*.traefik.me"
      - "traefik.http.routers.app1.tls=true"
      - "traefik.http.services.app1.loadbalancer.server.port=8080" # container port

  mygov2:
    # A container that exposes an API to show its IP address
    image: yudady/mygo:v2
    deploy:
      replicas: 3
    networks:
      - docker-traffic
    labels:
      - "traefik.http.routers.app2.rule=Host(`app2.traefik.me`)"
      - "traefik.http.routers.app2-tls.tls.domains[0].main=app2.traefik.me"
      - "traefik.http.routers.app2-tls.tls.domains[0].sans=app2-*.traefik.me"
      - "traefik.http.routers.app2.tls=true"
      - "traefik.http.services.app2.loadbalancer.server.port=8080" # container port

networks:
  docker-traffic:
    driver: bridge

# https://app1.traefik.me
# https://app2.traefik.me