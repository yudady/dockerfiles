version: "3.8"
services:

  reverse-proxy-https-helper:
    image: alpine
    command: sh -c "cd /etc/ssl/traefik
      && wget traefik.me/cert.pem -O cert.pem
      && wget traefik.me/privkey.pem -O privkey.pem"
    volumes:
      - ./data/certs:/etc/ssl/traefik
    networks:
      - dev

  traefik:
    restart: unless-stopped
    container_name: traefik_docker_symfony
    image: traefik:v2.0.2
    depends_on:
      - reverse-proxy-https-helper
    deploy:
      update_config:
        delay: 10s
    ports:
      - "80:80"
      - "443:443"
    labels:
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    volumes:
      - ./traefik.yml:/etc/traefik/traefik.yml
      - ./tls.yml:/etc/traefik/tls.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/certs:/etc/ssl/traefik
    networks:
      - dev

  app1:
    container_name: app1
    # A container that exposes an API to show its IP address
    image: yudady/mygo:v1
    deploy:
      replicas: 1
    networks:
      - dev
    labels:
      - "traefik.http.routers.app1.rule=Host(`app1.traefik.me`)"
      - "traefik.http.routers.app1-tls.tls.domains[0].main=app1.traefik.me"
      - "traefik.http.routers.app1-tls.tls.domains[0].sans=app1-*.traefik.me"
      - "traefik.http.routers.app1.tls=true"


  app2:
    container_name: app2
    # A container that exposes an API to show its IP address
    image: yudady/mygo:v2
    deploy:
      replicas: 1
    networks:
      - dev
    labels:
      - "traefik.http.routers.app2.rule=Host(`app2.traefik.me`)"
      - "traefik.http.routers.app2-tls.tls.domains[0].main=app2.traefik.me"
      - "traefik.http.routers.app2-tls.tls.domains[0].sans=app2-*.traefik.me"
      - "traefik.http.routers.app2.tls=true"


networks:
  dev:


# https://app1.traefik.me
# https://app2.traefik.me